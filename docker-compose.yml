version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: safeseed-postgres
    environment:
      POSTGRES_DB: safeseed_custody
      POSTGRES_USER: safeseed
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-safeseed_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - safeseed-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: safeseed-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - safeseed-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safeseed-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://safeseed:${POSTGRES_PASSWORD:-safeseed_dev_password}@postgres:5432/safeseed_custody
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-jwt_dev_secret}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-encryption_dev_key}
      SAFE_SERVICE_URL: https://safe-transaction-mainnet.safe.global
      INFURA_PROJECT_ID: ${INFURA_PROJECT_ID}
      ALCHEMY_API_KEY: ${ALCHEMY_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - safeseed-network
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: safeseed-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_CHAIN_ID: ${REACT_APP_CHAIN_ID:-1}
      REACT_APP_SAFE_SERVICE_URL: https://safe-transaction-mainnet.safe.global
      REACT_APP_INFURA_PROJECT_ID: ${INFURA_PROJECT_ID}
      REACT_APP_WALLETCONNECT_PROJECT_ID: ${WALLETCONNECT_PROJECT_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - safeseed-network
    restart: unless-stopped
    command: npm start

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: safeseed-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - safeseed-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: safeseed-prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - safeseed-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: safeseed-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - safeseed-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  safeseed-network:
    driver: bridge# Docker compose config
